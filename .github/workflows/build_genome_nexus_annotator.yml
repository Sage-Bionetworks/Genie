name: Build and Upload Genome Nexus Annotator

on:
  push:
    paths:
      - '.github/workflows/build_genome_nexus_annotator.yml'

env:
    # versions for dependencies used in annotator.jar build
    MAVEN_VERSION: '3.9.9'
    COMMIT_HASH: "2e67ebd08cf7c26bf1f55f2baf4b73ac36531119"
    JAVA_VERSION: "21"
    JAVA_DISTRIBUTION: "corretto"
    # synapse id of the Genome Nexus Testing folder
    OUTPUT_FOLDER_SYNAPSE_ID: syn70781006
    # env vars related to testing the annotator.jar
    PROD_DOCKER: ghcr.io/sage-bionetworks/genie:main
    SYNAPSE_AUTH_TOKEN: ${{ secrets.SYNAPSE_AUTH_TOKEN }}
    TEST_PROJECT_SYNID: syn7208886
jobs:
  build-annotator:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Install Maven
        run: |
          wget https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.zip
          unzip apache-maven-${MAVEN_VERSION}-bin.zip
          echo "$PWD/apache-maven-${MAVEN_VERSION}/bin" >> $GITHUB_PATH

      - name: Install Python & Synapse client
        run: |
          python3 -m pip install --upgrade pip
          pip install synapseclient chardet

      - name: Clone Genome Nexus Annotation Pipeline and check out commit hash
        run: |
          git clone https://github.com/genome-nexus/genome-nexus-annotation-pipeline.git
          cd genome-nexus-annotation-pipeline
          git checkout ${{ env.COMMIT_HASH }}

      - name: Configure application.properties and log4j.properties to be GENIE-specific
        run: |
            cd genome-nexus-annotation-pipeline
            CONFIG_PATH="annotationPipeline/src/main/resources"
            mkdir -p "$CONFIG_PATH"

            # Copy example configs first
            cp "${CONFIG_PATH}/application.properties.EXAMPLE" "${CONFIG_PATH}/application.properties"
            cp "${CONFIG_PATH}/log4j.properties.EXAMPLE" "${CONFIG_PATH}/log4j.properties"

            # Modify application.properties lines in place
            sed -i \
            -e 's|^spring.batch.job.enabled=.*|spring.batch.job.enabled=false|' \
            -e 's|^spring.jmx.enabled=.*|spring.jmx.enabled=false|' \
            -e 's|^chunk=.*|chunk=100|' \
            -e 's|^genomenexus.enrichment_fields=.*|genomenexus.enrichment_fields=annotation_summary,sift,polyphen,my_variant_info|' \
            -e 's|^genomenexus.isoform_query_parameter=.*|genomenexus.isoform_query_parameter=isoformOverrideSource|' \
            -e 's|^genomenexus.base=.*|genomenexus.base=https://genie.genomenexus.org/|' \
            "${CONFIG_PATH}/application.properties"

            # Modify log4j.properties line
            sed -i \
            -e 's|^log4j.appender.a.File.*|log4j.appender.a.File=/tmp/genomenexus-logfile.log|' \
            "${CONFIG_PATH}/log4j.properties"

            echo "[INFO] Application and log configs updated from EXAMPLE files."

      - name: Build annotator.jar (skips tests)
        run: |
          cd genome-nexus-annotation-pipeline
          mvn clean install -DskipTests
          find . -name annotator.jar

      - name: Upload annotator.jar, application.properties and log4j.properties to Synapse
        run: |
          cd genome-nexus-annotation-pipeline
          # Locate the built JAR dynamically
          FILE_PATH=$(ls -t annotationPipeline/target/annotationPipeline-*.jar | head -n 1)

          if [ ! -f "$FILE_PATH" ]; then
            echo "Could not find annotationPipeline JAR under annotationPipeline/target/"
            echo "Available .jar files:"
            find annotationPipeline/target -type f -name "*.jar" || true
            exit 1
          fi

          echo "Found JAR: $FILE_PATH"

          # Rename to annotator.jar
          TARGET_PATH="annotationPipeline/target/annotator.jar"
          cp "$FILE_PATH" "$TARGET_PATH"

          echo "Renamed to: $TARGET_PATH"
          ls -lh "$TARGET_PATH"

          echo "Uploading to Synapse entity ${{ env.OUTPUT_FOLDER_SYNAPSE_ID }}..."

          synapse login

          # Upload annotator.jar file!
          synapse store "$TARGET_PATH" --parentid ${{ env.OUTPUT_FOLDER_SYNAPSE_ID }}
          
          # Upload application and log4j files
          CONFIG_PATH="annotationPipeline/src/main/resources"
          synapse store "${CONFIG_PATH}/application.properties" --parentid ${{ env.OUTPUT_FOLDER_SYNAPSE_ID }}
          synapse store "${CONFIG_PATH}/log4j.properties" --parentid ${{ env.OUTPUT_FOLDER_SYNAPSE_ID }}
          
  check-annotator-build:
    needs: build-annotator
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Pull Public Docker Image from GHCR
      run: |
        docker pull ${{ env.PROD_DOCKER }}

    - name: Start Docker Container
      run: |
        docker run -d --name genie-container \
            -e SYNAPSE_AUTH_TOKEN="${{ env.SYNAPSE_AUTH_TOKEN }}" \
            ${{ env.PROD_DOCKER }} \
            sh -c "while true; do sleep 1; done"
    
    - name: Run processing on mutation data in test pipeline
      run: |
        docker exec genie-container \
        python3 /root/Genie/bin/input_to_database.py mutation \
            --project_id ${{ env.TEST_PROJECT_SYNID }} \
            --genie_annotation_pkg /root/annotation-tools \
            --createNewMafDatabase

    - name: Stop and Remove Docker Container
      run: docker stop genie-container && docker rm genie-container
